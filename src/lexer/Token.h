#pragma once

#include <string>

enum class TokenId : short {
    KEYWORD_AUTO,
    KEYWORD_BREAK,
    KEYWORD_CASE,
    KEYWORD_CHAR,
    KEYWORD_CONST,
    KEYWORD_CONTINUE,
    KEYWORD_DEFAULT,
    KEYWORD_DO,
    KEYWORD_DOUBLE,
    KEYWORD_ELSE,
    KEYWORD_ENUM,
    KEYWORD_EXTERN,
    KEYWORD_FLOAT,
    KEYWORD_FOR,
    KEYWORD_GOTO,
    KEYWORD_IF,
    KEYWORD_INLINE,
    KEYWORD_INT,
    KEYWORD_LONG,
    KEYWORD_REGISTER,
    KEYWORD_RESTRICT,
    KEYWORD_RETURN,
    KEYWORD_SHORT,
    KEYWORD_SIGNED,
    KEYWORD_SIZEOF,
    KEYWORD_STATIC,
    KEYWORD_STRUCT,
    KEYWORD_SWITCH,
    KEYWORD_TYPEDEF,
    KEYWORD_UNION,
    KEYWORD_UNSIGNED,
    KEYWORD_VOID,
    KEYWORD_VOLATILE,
    KEYWORD_WHILE,
    PUNCTUATOR_ADD, // +
    PUNCTUATOR_INCREMENT, // ++
    PUNCTUATOR_ADD_ASSIGN, // +=
    PUNCTUATOR_SUB, // -
    PUNCTUATOR_DECREMENT, // --
    PUNCTUATOR_SUB_ASSIGN, // -=
    PUNCTUATOR_POINT_TO, // ->
    PUNCTUATOR_MUL, // *
    PUNCTUATOR_MUL_ASSIGN, // *=
    PUNCTUATOR_DIV, // /
    PUNCTUATOR_DIV_ASSIGN, // /=
    PUNCTUATOR_MOD, // %
    PUNCTUATOR_MOD_ASSIGN, // %=
    PUNCTUATOR_ASSIGN, // =
    PUNCTUATOR_EQUAL, // ==
    PUNCTUATOR_GREATER, // >
    PUNCTUATOR_GREATER_EQUAL, // >=
    PUNCTUATOR_RIGHT_SHIFT, // >>
    PUNCTUATOR_RIGHT_SHIFT_ASSIGN, // >>=
    PUNCTUATOR_LESS, // <
    PUNCTUATOR_LESS_EQUAL, // <=
    PUNCTUATOR_LEFT_SHIFT, // <<
    PUNCTUATOR_LEFT_SHIFT_ASSIGN, // <<=
    PUNCTUATOR_LOGICAL_NOT, // !
    PUNCTUATOR_LOGICAL_NOT_EQUAL, // !=
    PUNCTUATOR_BITWISE_AND, // &
    PUNCTUATOR_LOGICAL_AND, // &&
    PUNCTUATOR_BITWISE_AND_ASSIGN, // &=
    PUNCTUATOR_BITWISE_OR, // |
    PUNCTUATOR_LOGICAL_OR, // ||
    PUNCTUATOR_BITWISE_OR_ASSIGN, // ||=
    PUNCTUATOR_EXCLUSIVE_OR, // ^
    PUNCTUATOR_EXCLUSIVE_OR_ASSIGN, // ^=
    PUNCTUATOR_BITWISE_NOT, // ~
    PUNCTUATOR_QUESTION, // ?
    PUNCTUATOR_COLON, // :
    PUNCTUATOR_LEFT_PARENTHESES, // (
    PUNCTUATOR_RIGHT_PARENTHESES, // )
    PUNCTUATOR_LEFT_SQUARE_BRACKETS, // [
    PUNCTUATOR_RIGHT_SQUARE_BRACKETS, // ]
    PUNCTUATOR_LEFT_CURLY_BRACES, // {
    PUNCTUATOR_RIGHT_CURLY_BRACES, // }
    PUNCTUATOR_COMMA, // ,
    PUNCTUATOR_SEMICOLON, // ;
    PUNCTUATOR_DOT, // .
    IDENTIFIER, // 标识符
    LITERAL_INTEGER, // 整形字面量
    LITERAL_FLOATING_POINT, // 浮点数字面量
    LITERAL_CHARACTER, // 字符字面量
    LITERAL_STRING, // 字符串字面量
    SPECIAL_EOF, // 用于作为最后一个token，方便语法分析进行解析
};

struct Token {
    TokenId id;
    std::string value;
    int lineNumber;
    int columnNumber;
};