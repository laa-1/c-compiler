primary-expression:
	identifier
	literal-integer
	literal-floating_point
	literal-character
	literal-string
	( comma-expression )

postfix-expression:
	postfix-expression [ comma-expression ]
	postfix-expression ( assignment-expression-list-opt )
	postfix-expression ++
	postfix-expression --
	primary-expression

unary-expression:
	++ unary-expression
	-- unary-expression
    & cast-expression
    * cast-expression
    + cast-expression
    - cast-expression
    ~ cast-expression
    ! cast-expression
	sizeof unary-expression
	postfix-expression

cast-expression:
	( type-name ) cast-expression
	unary-expression

multiplicative-expression:
	multiplicative-expression * cast-expression
	multiplicative-expression / cast-expression
	multiplicative-expression % cast-expression
	cast-expression

additive-expression:
	additive-expression + multiplicative-expression
	additive-expression - multiplicative-expression
	multiplicative-expression

shift-expression:
	shift-expression << additive-expression
	shift-expression >> additive-expression
	additive-expression

relational-expression:
	relational-expression < shift-expression
	relational-expression > shift-expression
	relational-expression <= shift-expression
	relational-expression >= shift-expression
	shift-expression

equality-expression:
	equality-expression == relational-expression
	equality-expression != relational-expression
	relational-expression

AND-expression:
	AND-expression & equality-expression
	equality-expression

exclusive-OR-expression:
	exclusive-OR-expression ^ AND-expression
	AND-expression

inclusive-OR-expression:
	inclusive-OR-expression | exclusive-OR-expression
	exclusive-OR-expression

logical-AND-expression:
	logical-AND-expression && inclusive-OR-expression
	inclusive-OR-expression

logical-OR-expression:
	logical-OR-expression || logical-AND-expression
	logical-AND-expression

conditional-expression:
	logical-OR-expression ? comma-expression : conditional-expression
	logical-OR-expression

assignment-expression:
    unary-expression = assignment-expression
    unary-expression *= assignment-expression
    unary-expression /= assignment-expression
    unary-expression %= assignment-expression
    unary-expression += assignment-expression
    unary-expression -= assignment-expression
    unary-expression <<= assignment-expression
    unary-expression >>= assignment-expression
    unary-expression &= assignment-expression
    unary-expression ^= assignment-expression
    unary-expression |= assignment-expression
	conditional-expression

comma-expression:
    comma-expression , assignment-expression
    assignment-expression

assignment-expression-list:
    assignment-expression-list , assignment-expression
    assignment-expression

// 存储说明符
storage-specifier:
    typedef
	extern
	static
    auto
    register

// 存储说明符列表
storage-specifier-list:
    storage-specifier storage-specifier-list-opt

// 函数说明符
function-specifier:
    inline

// 函数说明符列表
function-specifier-list:
    function-specifier function-specifier-list-opt

// 类型限定符
type-qualifier:
    const
    restrict
    volatile

// 类型限定符列表
type-qualifier-list:
    type-qualifier type-qualifier-list-opt

// 类型说明符
type-specifier:
	void
    char
    short
    int
    long
    long long
    float
    double
    signed int
    signed long
    signed long long
    unsigned int
    unsigned long
    unsigned long long

// 初值
initializer:
	{ assignment-expression-list }
	{ assignment-expression-list , }
    assignment-expression

// 直接声明符
direct-declarator:
    identifier
    ( pointer-declarator )
    direct-declarator [ literal-integer-opt ]
    direct-declarator ( parameter-list-opt )

// 指针声明符
pointer-declarator:
    * type-qualifier-list-opt pointer-declarator
    direct-declarator

// 直接抽象声明符
direct-abstract-declarator:
    ( pointer-abstract-declarator )
    direct-abstract-declarator-opt [ literal-integer-opt ]
    direct-abstract-declarator-opt ( parameter-list-opt )

// 指针抽象声明符
pointer-abstract-declarator:
    * type-qualifier-list-opt pointer-abstract-declarator
    direct-abstract-declarator

// 形式参数
parameter:
	type-qualifier-list-opt type-specifier pointer-declarator
	type-qualifier-list-opt type-specifier pointer-abstract-declarator-opt

// 形式参数列表
parameter-list:
	parameter-declaration-list , parameter-declaration
	parameter-declaration

// 初始化声明符
init-declarator:
	pointer-declarator = initializer
	pointer-declarator

// 初始化声明符列表
init-declarator-list:
	init-declarator-list , init-declarator
    init-declarator

// 声明
declaration:
	function-specifier-list-opt storage-specifier-list-opt type-qualifier-list-opt type-specifier-list init-declarator-list ;

// 类型名
type-name:
	type-qualifier-list-opt type-specifier pointer-abstract-declarator-opt

block-item:
	declaration
	statement

block-item-list:
	block-item-list block-item
	block-item

labeled-statement:
	identifier : statement
	case literal-integer : statement
	default : statement

compound-statement:
	{ block-item-list-opt }

expression-statement:
	comma-expression-opt ;

selection-statement:
	if ( comma-expression ) statement else statement
	if ( comma-expression ) statement
	switch ( comma-expression ) statement

iteration-statement:
	while ( comma-expression ) statement
	do statement while ( comma-expression ) ;
	for ( comma-expression-opt ; comma-expression-opt ; comma-expression-opt ) statement
	for ( declaration comma-expression-opt ; comma-expression-opt ) statement

jump-statement:
	goto identifier ;
	continue ;
	break ;
	return comma-expression-opt ;

statement:
	labeled-statement
	compound-statement
	expression-statement
	selection-statement
	iteration-statement
	jump-statement

function-definition:
    function-specifier-list-opt type-qualifier-list-opt type-specifier-list direct-declarator compound-statement

external-declaration:
	function-definition
	declaration

translation-unit:
	translation-unit external-declaration
	external-declaration
